---
import Layout from '../../../layouts/Layout.astro';
import { I18nextProvider } from '../../../components/I18nextProvider';
import { TranslatedText } from '../../../components/TranslatedText';
import { MarkdownContent } from '../../../components/MarkdownContent';
import { getBlogPost, getBlogPosts } from '../../../utils/blog';
import type { BlogPost } from '../../../types/blog';
import { CalculatorLinks } from '../../../components/CalculatorLinks';
import { useTranslation } from 'react-i18next';
import { RelatedBlogs } from '../../../components/RelatedBlogs';

export async function getStaticPaths() {
  const languages = [
    'en', 'zh', 'es', 'fr', 'de', 'ja', 'pa', 'jv', 
    'ko', 'vi', 'tr', 'sw', 'it', 'fa', 'ar', 'bn', 
    'pt', 'ru', 'ur', 'hi', 'ta', 'pl'
  ];

  // Get all blog posts for English to get all possible slugs
  const posts = await getBlogPosts('en');
  
  // Create paths for each language/post combination
  return languages.flatMap(lang => 
    posts.map(post => ({
      params: { 
        lang, 
        // The slug comes from the folder name
        slug: post.meta.slug 
      }
    }))
  );
}

const { lang, slug } = Astro.params;
const post = await getBlogPost(lang as string, slug as string);
const allPosts = await getBlogPosts(lang as string);

// Find the index of the current post
const currentIndex = allPosts.findIndex(p => p.meta.slug === slug);

// Get 3 posts around the current post (mix of before and after)
const relatedPosts = allPosts
  .filter((_, index) => {
    // If we're near the start, get the next 3 posts
    if (currentIndex < 2) {
      return index > 0 && index <= 3;
    }
    // If we're near the end, get the previous 3 posts
    if (currentIndex > allPosts.length - 3) {
      return index >= allPosts.length - 4 && index < allPosts.length && index !== currentIndex;
    }
    // Otherwise get 1 post before and 2 posts after
    return (index === currentIndex - 1) || (index === currentIndex + 1) || (index === currentIndex + 2);
  })
  .slice(0, 3);
---

<Layout 
  title={post.meta.seoTitle} 
  lang={lang} 
  page="home"
  description={post.meta.seoDescription}
>
  <article class="max-w-4xl mx-auto px-4 py-8">
    <I18nextProvider client:load>
      <header class="mb-8 text-center">
        <h1 class="text-4xl md:text-6xl font-bold mb-4">
          {post.meta.title}
        </h1>
        <p class="text-xl text-gray-400 mb-6">
          {post.meta.excerpt}
        </p>
        <div class="flex flex-wrap gap-2 justify-center">
          {(post.meta.tags || []).map(tag => (
            <span class="px-3 py-1 bg-dark-lighter rounded-full text-sm">
              #{tag}
            </span>
          ))}
        </div>
      </header>

      <div class="w-full aspect-[16/9] mb-8 rounded-lg overflow-hidden">
        <img 
          src={post.meta.coverImage} 
          alt={post.meta.title}
          class="w-full h-full object-cover"
          loading="eager"
        />
      </div>

      <div class="prose prose-invert max-w-none mb-12">
        <MarkdownContent 
          content={post.content} 
          client:load 
        />
      </div>

      <div data-testid="related-blogs-wrapper">
        <RelatedBlogs 
          client:only="react"
          currentSlug={post.meta.slug}
          relatedPosts={relatedPosts}
        />
      </div>

      <div class="mt-12">
        <CalculatorLinks client:load />
      </div>
    </I18nextProvider>
  </article>
</Layout>

<style>
  /* Base text size and color */
  :global(.prose) {
    @apply text-gray-300 text-lg leading-relaxed;
  }

  /* Headings hierarchy */
  :global(.prose h1) {
    @apply text-4xl md:text-5xl font-bold text-white mb-8 mt-12;
  }

  :global(.prose h2) {
    @apply text-3xl md:text-4xl font-bold text-white mt-12 mb-6 border-b border-gray-800 pb-2;
  }

  :global(.prose h3) {
    @apply text-2xl md:text-3xl font-bold text-white mt-8 mb-4;
  }

  :global(.prose h4) {
    @apply text-xl md:text-2xl font-bold text-white mt-6 mb-4;
  }

  /* Lists */
  :global(.prose ul),
  :global(.prose ol) {
    @apply my-6 ml-6;
  }

  :global(.prose li) {
    @apply mb-2;
  }

  /* Links */
  :global(.prose a) {
    @apply text-primary hover:text-primary/80 hover:underline transition-all;
  }

  /* Blockquotes */
  :global(.prose blockquote) {
    @apply border-l-4 border-primary pl-4 italic text-gray-400 my-6;
  }

  /* Code blocks */
  :global(.prose code) {
    @apply text-primary bg-dark-lighter px-1.5 py-0.5 rounded text-sm;
  }

  /* Paragraphs */
  :global(.prose p) {
    @apply mb-6;
  }

  /* Strong/Bold */
  :global(.prose strong) {
    @apply text-white font-bold;
  }

  /* Emphasis/Italic */
  :global(.prose em) {
    @apply italic text-gray-300;
  }

  /* Tables */
  :global(.prose table) {
    @apply w-full my-8 border-collapse;
  }

  :global(.prose th) {
    @apply bg-dark-lighter text-white p-3 text-left border border-gray-700;
  }

  :global(.prose td) {
    @apply p-3 border border-gray-700;
  }

  /* Horizontal rule */
  :global(.prose hr) {
    @apply my-12 border-gray-800;
  }
</style> 